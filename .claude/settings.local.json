{
  "$schema": "https://json.schemastore.org/claude-code-settings.json",
  "permissions": {
    "allow": [
      "Bash(npm create:*)",
      "Bash(ls:*)",
      "Bash(mkdir:*)",
      "Bash(npm install)",
      "Bash(npm run dev:*)",
      "Bash(node:*)",
      "Bash(rm:*)",
      "Bash(cat:*)",
      "Bash(npm run typecheck:*)",
      "Bash(npm run:*)",
      "Bash(touch:*)",
      "Bash(pkill:*)",
      "Bash(curl:*)",
      "Bash(true)",
      "Bash(python3:*)",
      "Bash(npx vite:*)",
      "Bash(psql:*)",
      "Bash(npm install resend)",
      "Bash(npm install:*)",
      "Bash(git add:*)",
      "Bash(git commit:*)",
      "Bash(git push:*)",
      "WebFetch(domain:pigskin-picksix-git-main-kurtis-hannis-projects.vercel.app)",
      "Bash(find:*)",
      "Bash(npx vercel env:*)",
      "Bash(cp:*)",
      "Bash(echo:*)",
      "WebFetch(domain:api.collegefootballdata.com)",
      "Bash(npx supabase:*)",
      "Bash(supabase:*)",
      "Bash(mv:*)",
      "Bash(grep:*)",
      "Bash(kill:*)",
      "Bash(sed:*)",
      "Bash(rg \"admin\" /Users/kurtiswh/Cursor/PP6/database/migrations/ -A 2 -B 2)",
      "Bash(VITE_SUPABASE_URL=\"https://zgdaqbnpgrabbnljmiqy.supabase.co\" VITE_SUPABASE_ANON_KEY=\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InpnZGFxYm5wZ3JhYmJubGptaXF5Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTM4NDU2MjgsImV4cCI6MjA2OTQyMTYyOH0.DCpIOdBbzQ0pPyk5WpfrKrcRxi49oyMccHCzP-T14w8\" node -e \"\nconst { createClient } = require(''@supabase/supabase-js'');\n\nconst supabaseUrl = process.env.VITE_SUPABASE_URL;\nconst supabaseKey = process.env.VITE_SUPABASE_ANON_KEY;\n\nconst supabase = createClient(supabaseUrl, supabaseKey);\n\nasync function checkData() {\n  console.log(''Checking picks data for Week 1, 2024...'');\n  \n  // Check anonymous picks first since you mentioned there are picks\n  const { data: anonPicks, error: anonError } = await supabase\n    .from(''anonymous_picks'')\n    .select(''*'')\n    .eq(''week'', 1)\n    .eq(''season'', 2024)\n    .limit(3);\n    \n  console.log(''Anonymous picks:'', anonPicks?.length || 0, ''found'');\n  if (anonError) console.error(''Anonymous picks error:'', anonError);\n  if (anonPicks?.length > 0) {\n    console.log(''Sample anonymous pick:'', JSON.stringify(anonPicks[0], null, 2));\n  }\n  \n  // Check if there are assigned picks\n  const { data: assignedPicks, error: assignedError } = await supabase\n    .from(''anonymous_picks'')\n    .select(''*'')\n    .eq(''week'', 1)\n    .eq(''season'', 2024)\n    .not(''assigned_user_id'', ''is'', null)\n    .limit(3);\n    \n  console.log(''Assigned anonymous picks:'', assignedPicks?.length || 0, ''found'');\n  if (assignedPicks?.length > 0) {\n    console.log(''Sample assigned pick:'', JSON.stringify(assignedPicks[0], null, 2));\n  }\n}\n\ncheckData().catch(console.error);\n\")",
      "Bash(VITE_SUPABASE_URL=\"https://zgdaqbnpgrabbnljmiqy.supabase.co\" VITE_SUPABASE_ANON_KEY=\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InpnZGFxYm5wZ3JhYmJubGptaXF5Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTM4NDU2MjgsImV4cCI6MjA2OTQyMTYyOH0.DCpIOdBbzQ0pPyk5WpfrKrcRxi49oyMccHCzP-T14w8\" node -e \"\nconst { createClient } = require(''@supabase/supabase-js'');\n\nconst supabaseUrl = process.env.VITE_SUPABASE_URL;\nconst supabaseKey = process.env.VITE_SUPABASE_ANON_KEY;\n\nconst supabase = createClient(supabaseUrl, supabaseKey);\n\nasync function checkAllData() {\n  console.log(''Checking all data for 2024...'');\n  \n  // Check all picks for 2024\n  const { data: picks, error: picksError } = await supabase\n    .from(''picks'')\n    .select(''*'')\n    .eq(''season'', 2024)\n    .limit(5);\n    \n  console.log(''Regular picks 2024:'', picks?.length || 0, ''found'');\n  if (picksError) console.error(''Picks error:'', picksError);\n  \n  // Check all anonymous picks for 2024\n  const { data: anonPicks, error: anonError } = await supabase\n    .from(''anonymous_picks'')\n    .select(''*'')\n    .eq(''season'', 2024)\n    .limit(5);\n    \n  console.log(''Anonymous picks 2024:'', anonPicks?.length || 0, ''found'');\n  if (anonError) console.error(''Anonymous picks error:'', anonError);\n  if (anonPicks?.length > 0) {\n    console.log(''Sample anonymous pick:'', JSON.stringify(anonPicks[0], null, 2));\n  }\n  \n  // Check games for 2024\n  const { data: games, error: gamesError } = await supabase\n    .from(''games'')\n    .select(''*'')\n    .eq(''season'', 2024)\n    .limit(5);\n    \n  console.log(''Games 2024:'', games?.length || 0, ''found'');\n  if (gamesError) console.error(''Games error:'', gamesError);\n  if (games?.length > 0) {\n    console.log(''Sample game:'', JSON.stringify(games[0], null, 2));\n  }\n  \n  // Check users\n  const { data: users, error: usersError } = await supabase\n    .from(''users'')\n    .select(''id, display_name'')\n    .limit(3);\n    \n  console.log(''Users total:'', users?.length || 0, ''found'');\n  if (usersError) console.error(''Users error:'', usersError);\n  if (users?.length > 0) {\n    console.log(''Sample user:'', JSON.stringify(users[0], null, 2));\n  }\n}\n\ncheckAllData().catch(console.error);\n\")",
      "Bash(VITE_SUPABASE_URL=\"https://zgdaqbnpgrabbnljmiqy.supabase.co\" VITE_SUPABASE_ANON_KEY=\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InpnZGFxYm5wZ3JhYmJubGptaXF5Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTM4NDU2MjgsImV4cCI6MjA2OTQyMTYyOH0.DCpIOdBbzQ0pPyk5WpfrKrcRxi49oyMccHCzP-T14w8\" node -e \"\nconst { createClient } = require(''@supabase/supabase-js'');\n\nconst supabaseUrl = process.env.VITE_SUPABASE_URL;\nconst supabaseKey = process.env.VITE_SUPABASE_ANON_KEY;\n\nconst supabase = createClient(supabaseUrl, supabaseKey);\n\nasync function checkPicks() {\n  console.log(''Checking all picks for 2024 by week...'');\n  \n  // Get all picks for 2024 with details\n  const { data: picks, error: picksError } = await supabase\n    .from(''picks'')\n    .select(''*'')\n    .eq(''season'', 2024);\n    \n  if (picksError) {\n    console.error(''Picks error:'', picksError);\n    return;\n  }\n  \n  console.log(''Total picks for 2024:'', picks?.length || 0);\n  \n  if (picks && picks.length > 0) {\n    // Group by week\n    const weekGroups = picks.reduce((acc, pick) => {\n      if (!acc[pick.week]) acc[pick.week] = [];\n      acc[pick.week].push(pick);\n      return acc;\n    }, {});\n    \n    console.log(''Picks by week:'', Object.keys(weekGroups).map(week => \\`Week ${week}: ${weekGroups[week].length} picks\\`));\n    \n    // Show a sample pick\n    console.log(''\\nSample pick:'', JSON.stringify(picks[0], null, 2));\n    \n    // Check Week 1 specifically\n    const week1Picks = picks.filter(p => p.week === 1);\n    console.log(''\\nWeek 1 picks:'', week1Picks.length);\n    if (week1Picks.length > 0) {\n      console.log(''Sample Week 1 pick:'', JSON.stringify(week1Picks[0], null, 2));\n    }\n  }\n}\n\ncheckPicks().catch(console.error);\n\")",
      "Bash(VITE_SUPABASE_URL=\"https://zgdaqbnpgrabbnljmiqy.supabase.co\" VITE_SUPABASE_ANON_KEY=\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InpnZGFxYm5wZ3JhYmJubGptaXF5Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTM4NDU2MjgsImV4cCI6MjA2OTQyMTYyOH0.DCpIOdBbzQ0pPyk5WpfrKrcRxi49oyMccHCzP-T14w8\" node -e \"\nconst { createClient } = require(''@supabase/supabase-js'');\n\nconst supabaseUrl = process.env.VITE_SUPABASE_URL;\nconst supabaseKey = process.env.VITE_SUPABASE_ANON_KEY;\n\nconst supabase = createClient(supabaseUrl, supabaseKey);\n\nasync function checkPicks() {\n  console.log(''Checking all picks for 2024 by week...'');\n  \n  const { data: picks, error: picksError } = await supabase\n    .from(''picks'')\n    .select(''*'')\n    .eq(''season'', 2024);\n    \n  if (picksError) {\n    console.error(''Picks error:'', picksError);\n    return;\n  }\n  \n  console.log(''Total picks for 2024:'', picks?.length || 0);\n  \n  if (picks && picks.length > 0) {\n    const weekGroups = {};\n    picks.forEach(pick => {\n      if (!weekGroups[pick.week]) weekGroups[pick.week] = [];\n      weekGroups[pick.week].push(pick);\n    });\n    \n    console.log(''Picks by week:'');\n    Object.keys(weekGroups).forEach(week => {\n      console.log(''  Week '' + week + '': '' + weekGroups[week].length + '' picks'');\n    });\n    \n    console.log(''\\nSample pick:'', JSON.stringify(picks[0], null, 2));\n    \n    const week1Picks = picks.filter(p => p.week === 1);\n    console.log(''\\nWeek 1 picks:'', week1Picks.length);\n    if (week1Picks.length > 0) {\n      console.log(''Sample Week 1 pick:'', JSON.stringify(week1Picks[0], null, 2));\n    }\n  }\n}\n\ncheckPicks().catch(console.error);\n\")",
      "WebFetch(domain:docs.anthropic.com)",
      "WebFetch(domain:github.com)",
      "Bash(npx tsc:*)",
      "Bash(vercel:*)",
      "Bash(VITE_SUPABASE_URL=\"https://zgdaqbnpgrabbnljmiqy.supabase.co\" VITE_SUPABASE_ANON_KEY=\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InpnZGFxYm5wZ3JhYmJubGptaXF5Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTM4NDU2MjgsImV4cCI6MjA2OTQyMTYyOH0.DCpIOdBbzQ0pPyk5WpfrKrcRxi49oyMccHCzP-T14w8\" node -e \"\nconst { createClient } = require(''@supabase/supabase-js'');\n\nconst supabaseUrl = process.env.VITE_SUPABASE_URL;\nconst supabaseKey = process.env.VITE_SUPABASE_ANON_KEY;\n\nconst supabase = createClient(supabaseUrl, supabaseKey);\n\nasync function checkLeaderboardData() {\n  console.log(''🔍 Analyzing leaderboard data structure...'');\n  \n  // Check LeagueSafe payments (verified players)\n  const { data: payments, error: paymentsError } = await supabase\n    .from(''leaguesafe_payments'')\n    .select(''*'')\n    .eq(''status'', ''Paid'')\n    .eq(''is_matched'', true)\n    .limit(5);\n    \n  console.log(''💳 LeagueSafe verified players:'', payments?.length || 0);\n  if (payments?.length > 0) {\n    console.log(''Sample payment:'', JSON.stringify(payments[0], null, 2));\n  }\n  \n  // Check picks with results/points\n  const { data: picks, error: picksError } = await supabase\n    .from(''picks'')\n    .select(''*'')\n    .eq(''season'', 2024)\n    .not(''result'', ''is'', null)\n    .not(''points_earned'', ''is'', null)\n    .limit(3);\n    \n  console.log(''🎯 Picks with calculated results:'', picks?.length || 0);\n  if (picks?.length > 0) {\n    console.log(''Sample pick with results:'', JSON.stringify(picks[0], null, 2));\n  }\n  \n  // Check all picks for 2024 to see data availability\n  const { data: allPicks, error: allPicksError } = await supabase\n    .from(''picks'')\n    .select(''user_id, week, season, result, points_earned'')\n    .eq(''season'', 2024);\n    \n  console.log(''📊 Total picks for 2024:'', allPicks?.length || 0);\n  if (allPicks?.length > 0) {\n    const withResults = allPicks.filter(p => p.result !== null && p.points_earned !== null);\n    const withoutResults = allPicks.filter(p => p.result === null || p.points_earned === null);\n    console.log(''- Picks with results:'', withResults.length);\n    console.log(''- Picks without results:'', withoutResults.length);\n    \n    if (withResults.length > 0) {\n      console.log(''Sample calculated pick:'', JSON.stringify(withResults[0], null, 2));\n    }\n  }\n}\n\ncheckLeaderboardData().catch(console.error);\n\")",
      "Bash(VITE_SUPABASE_URL=\"https://zgdaqbnpgrabbnljmiqy.supabase.co\" VITE_SUPABASE_ANON_KEY=\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InpnZGFxYm5wZ3JhYmJubGptaXF5Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTM4NDU2MjgsImV4cCI6MjA2OTQyMTYyOH0.DCpIOdBbzQ0pPyk5WpfrKrcRxi49oyMccHCzP-T14w8\" node -e \"\nconst { createClient } = require(''@supabase/supabase-js'');\n\nconst supabaseUrl = process.env.VITE_SUPABASE_URL;\nconst supabaseKey = process.env.VITE_SUPABASE_ANON_KEY;\n\nconst supabase = createClient(supabaseUrl, supabaseKey);\n\nasync function checkAnonymousPicks() {\n  console.log(''🎭 Checking anonymous picks...'');\n  \n  // Check anonymous picks table\n  const { data: anonPicks, error: anonError } = await supabase\n    .from(''anonymous_picks'')\n    .select(''*'')\n    .eq(''season'', 2024)\n    .limit(3);\n    \n  console.log(''🎭 Anonymous picks for 2024:'', anonPicks?.length || 0);\n  if (anonError) {\n    console.log(''❌ Anonymous picks error:'', anonError.message);\n  } else if (anonPicks?.length > 0) {\n    console.log(''Sample anonymous pick:'', JSON.stringify(anonPicks[0], null, 2));\n  }\n}\n\ncheckAnonymousPicks().catch(console.error);\n\")",
      "Bash(VITE_SUPABASE_URL=\"https://zgdaqbnpgrabbnljmiqy.supabase.co\" VITE_SUPABASE_ANON_KEY=\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InpnZGFxYm5wZ3JhYmJubGptaXF5Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTM4NDU2MjgsImV4cCI6MjA2OTQyMTYyOH0.DCpIOdBbzQ0pPyk5WpfrKrcRxi49oyMccHCzP-T14w8\" node -e \"\nconst { createClient } = require(''@supabase/supabase-js'');\n\nconst supabaseUrl = process.env.VITE_SUPABASE_URL;\nconst supabaseKey = process.env.VITE_SUPABASE_ANON_KEY;\n\nconst supabase = createClient(supabaseUrl, supabaseKey);\n\nasync function testRLSPolicies() {\n  console.log(''🧪 Testing anonymous access to leaderboard tables...'');\n  \n  // Test 1: LeagueSafe payments\n  try {\n    const { data: payments, error: paymentsError } = await supabase\n      .from(''leaguesafe_payments'')\n      .select(''user_id, leaguesafe_owner_name'')\n      .eq(''season'', 2024)\n      .eq(''status'', ''Paid'')\n      .eq(''is_matched'', true)\n      .limit(3);\n      \n    if (paymentsError) {\n      console.log(''❌ LeagueSafe payments error:'', paymentsError.message);\n    } else {\n      console.log(''✅ LeagueSafe payments accessible:'', payments?.length || 0, ''records'');\n    }\n  } catch (error) {\n    console.log(''❌ LeagueSafe payments exception:'', error.message);\n  }\n  \n  // Test 2: Picks table  \n  try {\n    const { data: picks, error: picksError } = await supabase\n      .from(''picks'')\n      .select(''user_id, week, season'')\n      .eq(''season'', 2024)\n      .limit(3);\n      \n    if (picksError) {\n      console.log(''❌ Picks table error:'', picksError.message);\n    } else {\n      console.log(''✅ Picks table accessible:'', picks?.length || 0, ''records'');\n    }\n  } catch (error) {\n    console.log(''❌ Picks table exception:'', error.message);\n  }\n  \n  // Test 3: Games table\n  try {\n    const { data: games, error: gamesError } = await supabase\n      .from(''games'')\n      .select(''id, home_team, away_team'')\n      .eq(''season'', 2024)\n      .limit(3);\n      \n    if (gamesError) {\n      console.log(''❌ Games table error:'', gamesError.message);\n    } else {\n      console.log(''✅ Games table accessible:'', games?.length || 0, ''records'');\n    }\n  } catch (error) {\n    console.log(''❌ Games table exception:'', error.message);\n  }\n  \n  // Test 4: Users table\n  try {\n    const { data: users, error: usersError } = await supabase\n      .from(''users'')\n      .select(''id, display_name'')\n      .limit(3);\n      \n    if (usersError) {\n      console.log(''❌ Users table error:'', usersError.message);\n    } else {\n      console.log(''✅ Users table accessible:'', users?.length || 0, ''records'');\n    }\n  } catch (error) {\n    console.log(''❌ Users table exception:'', error.message);\n  }\n}\n\ntestRLSPolicies().catch(console.error);\n\")",
      "Bash(VITE_SUPABASE_URL=\"https://zgdaqbnpgrabbnljmiqy.supabase.co\" VITE_SUPABASE_ANON_KEY=\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InpnZGFxYm5wZ3JhYmJubGptaXF5Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTM4NDU2MjgsImV4cCI6MjA2OTQyMTYyOH0.DCpIOdBbzQ0pPyk5WpfrKrcRxi49oyMccHCzP-T14w8\" node -e \"\nconst { createClient } = require(''@supabase/supabase-js'');\n\nconst supabaseUrl = process.env.VITE_SUPABASE_URL;\nconst supabaseKey = process.env.VITE_SUPABASE_ANON_KEY;\n\nconst supabase = createClient(supabaseUrl, supabaseKey);\n\nasync function testLeaderboardQueries() {\n  console.log(''🔍 Testing exact leaderboard queries...'');\n  const season = 2024;\n  \n  // Test the exact getUsers query\n  try {\n    console.log(''Testing getUsers query...'');\n    const { data: payments, error } = await supabase\n      .from(''leaguesafe_payments'')\n      .select(''user_id, leaguesafe_owner_name, status, is_matched'')\n      .eq(''season'', season)\n      .eq(''status'', ''Paid'')\n      .eq(''is_matched'', true)\n      .not(''user_id'', ''is'', null);\n      \n    if (error) {\n      console.log(''❌ getUsers query error:'', error.message);\n    } else {\n      console.log(''✅ getUsers query success:'', payments?.length || 0, ''verified players'');\n      if (payments?.length > 0) {\n        console.log(''Sample:'', payments[0]);\n      }\n    }\n  } catch (error) {\n    console.log(''❌ getUsers query exception:'', error.message);\n  }\n  \n  // Test the exact getAuthenticatedPicks query - first step\n  try {\n    console.log(''\\nTesting getAuthenticatedPicks step 1 (get verified players)...'');\n    const { data: verifiedPlayers, error: playersError } = await supabase\n      .from(''leaguesafe_payments'')\n      .select(''user_id'')\n      .eq(''season'', season)\n      .eq(''status'', ''Paid'')\n      .eq(''is_matched'', true)\n      .not(''user_id'', ''is'', null);\n      \n    if (playersError) {\n      console.log(''❌ Verified players error:'', playersError.message);\n      return;\n    }\n    \n    const verifiedUserIds = verifiedPlayers?.map(p => p.user_id) || [];\n    console.log(''✅ Found'', verifiedUserIds.length, ''verified user IDs'');\n    \n    if (verifiedUserIds.length > 0) {\n      // Test step 2 - get picks for verified users\n      console.log(''\\nTesting getAuthenticatedPicks step 2 (get picks)...'');\n      const { data: picks, error: picksError } = await supabase\n        .from(''picks'')\n        .select(''user_id,game_id,week,season,selected_team,is_lock,result,points_earned'')\n        .eq(''season'', season)\n        .in(''user_id'', verifiedUserIds)\n        .not(''result'', ''is'', null)\n        .not(''points_earned'', ''is'', null)\n        .limit(5);\n        \n      if (picksError) {\n        console.log(''❌ Picks query error:'', picksError.message);\n      } else {\n        console.log(''✅ Picks query success:'', picks?.length || 0, ''picks found'');\n        if (picks?.length > 0) {\n          console.log(''Sample pick:'', picks[0]);\n        }\n      }\n    }\n  } catch (error) {\n    console.log(''❌ getAuthenticatedPicks exception:'', error.message);\n  }\n  \n  // Test games query\n  try {\n    console.log(''\\nTesting getGames query...'');\n    const { data: games, error: gamesError } = await supabase\n      .from(''games'')\n      .select(''*'')\n      .eq(''season'', season)\n      .limit(3);\n      \n    if (gamesError) {\n      console.log(''❌ Games query error:'', gamesError.message);\n    } else {\n      console.log(''✅ Games query success:'', games?.length || 0, ''games found'');\n    }\n  } catch (error) {\n    console.log(''❌ Games query exception:'', error.message);\n  }\n}\n\ntestLeaderboardQueries().catch(console.error);\n\")",
      "Bash(VITE_SUPABASE_URL=\"https://zgdaqbnpgrabbnljmiqy.supabase.co\" VITE_SUPABASE_ANON_KEY=\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InpnZGFxYm5wZ3JhYmJubGptaXF5Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTM4NDU2MjgsImV4cCI6MjA2OTQyMTYyOH0.DCpIOdBbzQ0pPyk5WpfrKrcRxi49oyMccHCzP-T14w8\" node -e \"\nconst { createClient } = require(''@supabase/supabase-js'');\n\nconst supabaseUrl = process.env.VITE_SUPABASE_URL;\nconst supabaseKey = process.env.VITE_SUPABASE_ANON_KEY;\n\nconst supabase = createClient(supabaseUrl, supabaseKey);\n\nasync function testPicksQueryDebugging() {\n  console.log(''🐞 Debugging picks query issue...'');\n  \n  // Get a small sample of verified users\n  const { data: verifiedPlayers } = await supabase\n    .from(''leaguesafe_payments'')\n    .select(''user_id'')\n    .eq(''season'', 2024)\n    .eq(''status'', ''Paid'')\n    .eq(''is_matched'', true)\n    .not(''user_id'', ''is'', null)\n    .limit(5); // Only 5 users for testing\n    \n  const verifiedUserIds = verifiedPlayers?.map(p => p.user_id) || [];\n  console.log(''Testing with'', verifiedUserIds.length, ''user IDs'');\n  \n  // Test 1: Basic picks query without filters\n  try {\n    console.log(''Test 1: Basic picks query...'');\n    const { data, error } = await supabase\n      .from(''picks'')\n      .select(''user_id, season'')\n      .eq(''season'', 2024)\n      .limit(3);\n      \n    console.log(''Basic picks result:'', data?.length || 0, ''picks'');\n    if (error) console.log(''Basic picks error:'', error.message);\n  } catch (error) {\n    console.log(''Basic picks exception:'', error.message);\n  }\n  \n  // Test 2: With IN clause\n  try {\n    console.log(''\\nTest 2: With IN clause...'');\n    const { data, error } = await supabase\n      .from(''picks'')\n      .select(''user_id, season'')\n      .eq(''season'', 2024)\n      .in(''user_id'', verifiedUserIds)\n      .limit(3);\n      \n    console.log(''IN clause result:'', data?.length || 0, ''picks'');\n    if (error) console.log(''IN clause error:'', error.message);\n  } catch (error) {\n    console.log(''IN clause exception:'', error.message);\n  }\n  \n  // Test 3: With result filters\n  try {\n    console.log(''\\nTest 3: With result filters...'');\n    const { data, error } = await supabase\n      .from(''picks'')\n      .select(''user_id, season, result, points_earned'')\n      .eq(''season'', 2024)\n      .not(''result'', ''is'', null)\n      .not(''points_earned'', ''is'', null)\n      .limit(3);\n      \n    console.log(''Result filters result:'', data?.length || 0, ''picks'');\n    if (error) console.log(''Result filters error:'', error.message);\n  } catch (error) {\n    console.log(''Result filters exception:'', error.message);\n  }\n  \n  // Test 4: Full query with small user set\n  try {\n    console.log(''\\nTest 4: Full query with small user set...'');\n    const { data, error } = await supabase\n      .from(''picks'')\n      .select(''user_id,game_id,week,season,selected_team,is_lock,result,points_earned'')\n      .eq(''season'', 2024)\n      .in(''user_id'', verifiedUserIds)\n      .not(''result'', ''is'', null)\n      .not(''points_earned'', ''is'', null)\n      .limit(3);\n      \n    console.log(''Full query result:'', data?.length || 0, ''picks'');\n    if (error) console.log(''Full query error:'', error.message);\n  } catch (error) {\n    console.log(''Full query exception:'', error.message);\n  }\n}\n\ntestPicksQueryDebugging().catch(console.error);\n\")",
      "Bash(VITE_SUPABASE_URL=\"https://zgdaqbnpgrabbnljmiqy.supabase.co\" VITE_SUPABASE_ANON_KEY=\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InpnZGFxYm5wZ3JhYmJubGptaXF5Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTM4NDU2MjgsImV4cCI6MjA2OTQyMTYyOH0.DCpIOdBbzQ0pPyk5WpfrKrcRxi49oyMccHCzP-T14w8\" node -e \"\nconst { createClient } = require(''@supabase/supabase-js'');\n\nconst supabaseUrl = process.env.VITE_SUPABASE_URL;\nconst supabaseKey = process.env.VITE_SUPABASE_ANON_KEY;\n\nconst supabase = createClient(supabaseUrl, supabaseKey);\n\nasync function testRLSPolicies() {\n  console.log(''🔍 Testing RLS policies for leaguesafe_payments...'');\n  \n  try {\n    // Test with a timeout to mimic the actual issue\n    const timeoutPromise = new Promise((_, reject) => {\n      setTimeout(() => reject(new Error(''Query timeout after 5 seconds'')), 5000);\n    });\n    \n    const queryPromise = supabase\n      .from(''leaguesafe_payments'')\n      .select(''user_id, leaguesafe_owner_name, status, is_matched'')\n      .eq(''season'', 2024)\n      .eq(''status'', ''Paid'')\n      .eq(''is_matched'', true)\n      .not(''user_id'', ''is'', null)\n      .limit(5);\n      \n    const { data, error } = await Promise.race([queryPromise, timeoutPromise]);\n    \n    if (error) {\n      console.log(''❌ RLS Policy Error:'', error.message);\n      console.log(''Error details:'', JSON.stringify(error, null, 2));\n    } else {\n      console.log(''✅ RLS Policy Test SUCCESS - Found'', data?.length || 0, ''verified payments'');\n      if (data?.length > 0) {\n        console.log(''Sample record:'', JSON.stringify(data[0], null, 2));\n      }\n    }\n  } catch (error) {\n    console.log(''❌ RLS Policy Exception:'', error.message);\n  }\n}\n\ntestRLSPolicies().catch(console.error);\n\")",
      "Bash(VITE_SUPABASE_URL=\"https://zgdaqbnpgrabbnljmiqy.supabase.co\" VITE_SUPABASE_ANON_KEY=\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InpnZGFxYm5wZ3JhYmJubGptaXF5Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTM4NDU2MjgsImV4cCI6MjA2OTQyMTYyOH0.DCpIOdBbzQ0pPyk5WpfrKrcRxi49oyMccHCzP-T14w8\" node -e \"\nconst { createClient } = require(''@supabase/supabase-js'');\n\nconst supabaseUrl = process.env.VITE_SUPABASE_URL;\nconst supabaseKey = process.env.VITE_SUPABASE_ANON_KEY;\n\nconst supabase = createClient(supabaseUrl, supabaseKey);\n\nasync function checkAllRLSPolicies() {\n  console.log(''🔍 Checking all RLS policies that might affect leaguesafe_payments...'');\n  \n  try {\n    // Test 1: Basic query like in leaderboardService.getUsers()\n    console.log(''\\nTest 1: Basic getUsers() query...'');\n    const { data: users1, error: error1 } = await supabase\n      .from(''leaguesafe_payments'')\n      .select(''user_id, leaguesafe_owner_name'')\n      .eq(''season'', 2024)\n      .eq(''status'', ''Paid'')\n      .eq(''is_matched'', true)\n      .not(''user_id'', ''is'', null);\n      \n    if (error1) {\n      console.log(''❌ Basic query error:'', error1.message);\n    } else {\n      console.log(''✅ Basic query success:'', users1?.length, ''users found'');\n    }\n    \n    // Test 2: Count query to see if it''s a data volume issue\n    console.log(''\\nTest 2: Count query...'');\n    const { data: count, error: error2 } = await supabase\n      .from(''leaguesafe_payments'')\n      .select(''*'', { count: ''exact'', head: true })\n      .eq(''season'', 2024)\n      .eq(''status'', ''Paid'')\n      .eq(''is_matched'', true)\n      .not(''user_id'', ''is'', null);\n      \n    if (error2) {\n      console.log(''❌ Count query error:'', error2.message);\n    } else {\n      console.log(''✅ Count query success:'', count, ''total verified users'');\n    }\n    \n    // Test 3: Large batch to mimic application behavior\n    console.log(''\\nTest 3: Large result set (like in app)...'');\n    const { data: largeQuery, error: error3 } = await supabase\n      .from(''leaguesafe_payments'')\n      .select(''user_id, leaguesafe_owner_name'')\n      .eq(''season'', 2024)\n      .eq(''status'', ''Paid'')  \n      .eq(''is_matched'', true)\n      .not(''user_id'', ''is'', null)\n      .order(''user_id'');\n      \n    if (error3) {\n      console.log(''❌ Large query error:'', error3.message);\n    } else {\n      console.log(''✅ Large query success:'', largeQuery?.length, ''users retrieved'');\n      console.log(''First few user IDs:'', largeQuery?.slice(0, 3).map(u => u.user_id));\n    }\n    \n  } catch (error) {\n    console.log(''❌ Overall exception:'', error.message);\n  }\n}\n\ncheckAllRLSPolicies().catch(console.error);\n\")",
      "Bash(VITE_SUPABASE_URL=\"https://zgdaqbnpgrabbnljmiqy.supabase.co\" VITE_SUPABASE_ANON_KEY=\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InpnZGFxYm5wZ3JhYmJubGptaXF5Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTM4NDU2MjgsImV4cCI6MjA2OTQyMTYyOH0.DCpIOdBbzQ0pPyk5WpfrKrcRxi49oyMccHCzP-T14w8\" node -e \"\nconst { createClient } = require(''@supabase/supabase-js'');\nconst supabase = createClient(process.env.VITE_SUPABASE_URL, process.env.VITE_SUPABASE_ANON_KEY);\n\nasync function getUsers() {\n  const { data, error } = await supabase\n    .from(''leaguesafe_payments'')\n    .select(''user_id, leaguesafe_owner_name'')\n    .eq(''season'', 2024)\n    .eq(''status'', ''Paid'')\n    .eq(''is_matched'', true)\n    .not(''user_id'', ''is'', null)\n    .limit(10);\n    \n  if (error) console.error(''Error:'', error);\n  else console.log(''Users:'', JSON.stringify(data, null, 2));\n}\n\ngetUsers().catch(console.error);\n\")",
      "Bash(VITE_SUPABASE_URL=\"https://zgdaqbnpgrabbnljmiqy.supabase.co\" VITE_SUPABASE_ANON_KEY=\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InpnZGFxYm5wZ3JhYmJubGptaXF5Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTM4NDU2MjgsImV4cCI6MjA2OTQyMTYyOH0.DCpIOdBbzQ0pPyk5WpfrKrcRxi49oyMccHCzP-T14w8\" node -e \"\nconst { createClient } = require(''@supabase/supabase-js'');\nconst supabase = createClient(process.env.VITE_SUPABASE_URL, process.env.VITE_SUPABASE_ANON_KEY);\n\nasync function testLeaderboardViews() {\n  console.log(''🔍 Testing leaderboard view queries...'');\n  \n  const testUserIds = [\n    ''507d0f7c-86c8-4051-b83d-5a97c0de1b35'',\n    ''9634a64a-4b4d-4777-9981-02ce59b6729d'',\n    ''a37db267-0995-45e5-9bdf-5c662face32b''\n  ];\n  \n  // Test 1: Simple season_leaderboard query without filters\n  try {\n    console.log(''\\nTest 1: Simple season_leaderboard query...'');\n    const { data: simple, error: simpleError } = await supabase\n      .from(''season_leaderboard'')\n      .select(''*'')\n      .limit(3);\n      \n    if (simpleError) {\n      console.log(''❌ Simple query error:'', simpleError.message);\n    } else {\n      console.log(''✅ Simple query success:'', simple?.length || 0, ''entries'');\n    }\n  } catch (error) {\n    console.log(''❌ Simple query exception:'', error.message);\n  }\n  \n  // Test 2: Season filter only\n  try {\n    console.log(''\\nTest 2: Season filter query...'');\n    const { data: season, error: seasonError } = await supabase\n      .from(''season_leaderboard'')\n      .select(''*'')\n      .eq(''season'', 2024)\n      .limit(3);\n      \n    if (seasonError) {\n      console.log(''❌ Season filter error:'', seasonError.message);\n    } else {\n      console.log(''✅ Season filter success:'', season?.length || 0, ''entries'');\n    }\n  } catch (error) {\n    console.log(''❌ Season filter exception:'', error.message);\n  }\n  \n  // Test 3: IN clause with user IDs (the failing query)\n  try {\n    console.log(''\\nTest 3: IN clause query (the one that hangs)...'');\n    const { data: inClause, error: inError } = await supabase\n      .from(''season_leaderboard'')\n      .select(''*'')\n      .eq(''season'', 2024)\n      .in(''user_id'', testUserIds);\n      \n    if (inError) {\n      console.log(''❌ IN clause error:'', inError.message);\n    } else {\n      console.log(''✅ IN clause success:'', inClause?.length || 0, ''entries'');\n      if (inClause?.length > 0) {\n        console.log(''Sample entry:'', JSON.stringify(inClause[0], null, 2));\n      }\n    }\n  } catch (error) {\n    console.log(''❌ IN clause exception:'', error.message);\n  }\n}\n\ntestLeaderboardViews().catch(console.error);\n\")",
      "Bash(VITE_SUPABASE_URL=\"https://zgdaqbnpgrabbnljmiqy.supabase.co\" VITE_SUPABASE_ANON_KEY=\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InpnZGFxYm5wZ3JhYmJubGptaXF5Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTM4NDU2MjgsImV4cCI6MjA2OTQyMTYyOH0.DCpIOdBbzQ0pPyk5WpfrKrcRxi49oyMccHCzP-T14w8\" npx supabase db reset --local)",
      "Bash(VITE_SUPABASE_URL=\"https://zgdaqbnpgrabbnljmiqy.supabase.co\" VITE_SUPABASE_ANON_KEY=\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InpnZGFxYm5wZ3JhYmJubGptaXF5Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTM4NDU2MjgsImV4cCI6MjA2OTQyMTYyOH0.DCpIOdBbzQ0pPyk5WpfrKrcRxi49oyMccHCzP-T14w8\" node test_triggers.js)",
      "Bash(VITE_SUPABASE_URL=\"https://zgdaqbnpgrabbnljmiqy.supabase.co\" VITE_SUPABASE_ANON_KEY=\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InpnZGFxYm5wZ3JhYmJubGptaXF5Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTM4NDU2MjgsImV4cCI6MjA2OTQyMTYyOH0.DCpIOdBbzQ0pPyk5WpfrKrcRxi49oyMccHCzP-T14w8\" node -e \"\nimport { createClient } from ''@supabase/supabase-js'';\nconst supabase = createClient(process.env.VITE_SUPABASE_URL, process.env.VITE_SUPABASE_ANON_KEY);\n\nasync function checkCurrentStructure() {\n  console.log(''📊 Current leaderboard structure analysis...'');\n  \n  // Check if the tables are views or actual tables\n  const { data: weeklyInfo, error } = await supabase.rpc(''version''); // Just to test connection\n  \n  const { data: seasonSample } = await supabase\n    .from(''season_leaderboard'')\n    .select(''*'')\n    .eq(''season'', 2024)\n    .limit(3);\n    \n  if (seasonSample && seasonSample.length > 0) {\n    console.log(''Current season leaderboard structure:'');\n    console.log(Object.keys(seasonSample[0]));\n    console.log(''Sample entry:'', JSON.stringify(seasonSample[0], null, 2));\n  } else {\n    console.log(''No season leaderboard data found'');\n  }\n}\n\ncheckCurrentStructure().catch(console.error);\n\")",
      "Bash(VITE_SUPABASE_URL=\"https://zgdaqbnpgrabbnljmiqy.supabase.co\" VITE_SUPABASE_ANON_KEY=\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InpnZGFxYm5wZ3JhYmJubGptaXF5Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTM4NDU2MjgsImV4cCI6MjA2OTQyMTYyOH0.DCpIOdBbzQ0pPyk5WpfrKrcRxi49oyMccHCzP-T14w8\" node verify_system.js)",
      "Bash(VITE_SUPABASE_URL=\"https://zgdaqbnpgrabbnljmiqy.supabase.co\" VITE_SUPABASE_ANON_KEY=\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InpnZGFxYm5wZ3JhYmJubGptaXF5Iiwicm9sZSI6ImFub24iLCJpYXQiOjE7NTM4NDU2MjgsImV4cCI6MjA2OTQyMTYyOH0.DCpIOdBbzQ0pPyk5WpfrKrcRxi49oyMccHCzP-T14w8\" node test_service_update.js)",
      "Bash(VITE_SUPABASE_URL=\"https://zgdaqbnpgrabbnljmiqy.supabase.co\" VITE_SUPABASE_ANON_KEY=\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InpnZGFxYm5wZ3JhYmJubGptaXF5Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTM4NDU2MjgsImV4cCI6MjA2OTQyMTYyOH0.DCpIOdBbzQ0pPyk5WpfrKrcRxi49oyMccHCzP-T14w8\" node -e \"\nimport { createClient } from ''@supabase/supabase-js'';\nconst supabase = createClient(process.env.VITE_SUPABASE_URL, process.env.VITE_SUPABASE_ANON_KEY);\n\nasync function testAccess() {\n  // Test current leaderboard access\n  const { data: seasonData, error: seasonError } = await supabase\n    .from(''season_leaderboard'')\n    .select(''user_id, display_name, total_points'')\n    .eq(''season'', 2024)\n    .order(''season_rank'')\n    .limit(5);\n    \n  console.log(''Season leaderboard access:'');\n  console.log(''- Error:'', seasonError?.message || ''None'');\n  console.log(''- Data count:'', seasonData?.length || 0);\n  if (seasonData && seasonData.length > 0) {\n    console.log(''- Sample entry:'', seasonData[0]);\n  }\n  \n  // Test LeagueSafe access\n  const { data: lsData, error: lsError } = await supabase\n    .from(''leaguesafe_payments'')\n    .select(''user_id, status, is_matched'')\n    .limit(1);\n    \n  console.log(''\\nLeagueSafe payments access:'');\n  console.log(''- Error:'', lsError?.message || ''None'');\n  console.log(''- Data count:'', lsData?.length || 0);\n}\n\ntestAccess().catch(console.error);\n\")",
      "Bash(VITE_SUPABASE_URL=\"https://zgdaqbnpgrabbnljmiqy.supabase.co\" VITE_SUPABASE_ANON_KEY=\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InpnZGFxYm5wZ3JhYmJubGptaXF5Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTM4NDU2MjgsImV4cCI6MjA2OTQyMTYyOH0.DCpIOdBbzQ0pPyk5WpfrKrcRxi49oyMccHCzP-T14w8\" node test_leaderboard_system.js)",
      "Bash(VITE_SUPABASE_URL=\"https://zgdaqbnpgrabbnljmiqy.supabase.co\" VITE_SUPABASE_ANON_KEY=\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InpnZGFxYm5wZ3JhYmJubGptaXF5Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTM4NDU2MjgsImV4cCI6MjA2OTQyMTYyOH0.DCpIOdBbzQ0pPyk5WpfrKrcRxi49oyMccHCzP-T14w8\" node -e \"\nimport { createClient } from ''@supabase/supabase-js'';\nconst supabase = createClient(process.env.VITE_SUPABASE_URL, process.env.VITE_SUPABASE_ANON_KEY);\n\nasync function checkWeeklyData() {\n  console.log(''🔍 Checking weekly_leaderboard table data...\\n'');\n\n  try {\n    // Test 1: Check if table exists and has data\n    const { data: allData, error: allError } = await supabase\n      .from(''weekly_leaderboard'')\n      .select(''week, season, user_id, display_name, total_points, is_verified, payment_status'')\n      .eq(''season'', 2024)\n      .order(''week'', { ascending: true })\n      .limit(10);\n      \n    if (allError) {\n      console.log(''❌ Error querying weekly_leaderboard:'', allError.message);\n      return;\n    }\n    \n    console.log(''📊 Weekly leaderboard data for 2024:'');\n    console.log(''- Total entries found:'', allData?.length || 0);\n    \n    if (allData && allData.length > 0) {\n      // Group by week\n      const weekGroups = allData.reduce((acc, entry) => {\n        if (!acc[entry.week]) acc[entry.week] = [];\n        acc[entry.week].push(entry);\n        return acc;\n      }, {});\n      \n      console.log(''- Weeks with data:'', Object.keys(weekGroups).join('', ''));\n      console.log(''- Sample entry:'', JSON.stringify(allData[0], null, 2));\n      \n      // Check verification status\n      const verifiedCount = allData.filter(e => e.is_verified).length;\n      const paidCount = allData.filter(e => e.payment_status === ''Paid'').length;\n      console.log(''- Verified entries (is_verified=true):'', verifiedCount);\n      console.log(''- Paid entries (payment_status=Paid):'', paidCount);\n    }\n    \n    // Test 2: Try the exact query from LeaderboardService\n    console.log(''\\n🧪 Testing exact LeaderboardService query for Week 1...'');\n    const { data: week1Data, error: week1Error } = await supabase\n      .from(''weekly_leaderboard'')\n      .select(''*'')\n      .eq(''season'', 2024)\n      .eq(''week'', 1)\n      .eq(''is_verified'', true)\n      .order(''weekly_rank'', { ascending: true });\n      \n    if (week1Error) {\n      console.log(''❌ Week 1 verified query error:'', week1Error.message);\n    } else {\n      console.log(''✅ Week 1 verified query success:'', week1Data?.length || 0, ''entries'');\n      if (week1Data && week1Data.length > 0) {\n        console.log(''- Top entry:'', {\n          name: week1Data[0].display_name,\n          points: week1Data[0].total_points,\n          rank: week1Data[0].weekly_rank,\n          verified: week1Data[0].is_verified\n        });\n      }\n    }\n    \n    // Test 3: Try without is_verified filter\n    console.log(''\\n🧪 Testing query WITHOUT is_verified filter...'');\n    const { data: allWeek1, error: allWeek1Error } = await supabase\n      .from(''weekly_leaderboard'')\n      .select(''*'')\n      .eq(''season'', 2024)\n      .eq(''week'', 1)\n      .order(''weekly_rank'', { ascending: true })\n      .limit(5);\n      \n    if (allWeek1Error) {\n      console.log(''❌ All Week 1 query error:'', allWeek1Error.message);\n    } else {\n      console.log(''✅ All Week 1 query success:'', allWeek1?.length || 0, ''entries'');\n      if (allWeek1 && allWeek1.length > 0) {\n        console.log(''- Top entry:'', {\n          name: allWeek1[0].display_name,\n          points: allWeek1[0].total_points,\n          rank: allWeek1[0].weekly_rank,\n          verified: allWeek1[0].is_verified,\n          payment_status: allWeek1[0].payment_status\n        });\n      }\n    }\n    \n  } catch (error) {\n    console.error(''❌ Test failed:'', error.message);\n  }\n}\n\ncheckWeeklyData().catch(console.error);\n\")",
      "Bash(VITE_SUPABASE_URL=\"https://zgdaqbnpgrabbnljmiqy.supabase.co\" VITE_SUPABASE_ANON_KEY=\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InpnZGFxYm5wZ3JhYmJubGptaXF5Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTM4NDU2MjgsImV4cCI6MjA2OTQyMTYyOH0.DCpIOdBbzQ0pPyk5WpfrKrcRxi49oyMccHCzP-T14w8\" node -e \"\nimport { createClient } from ''@supabase/supabase-js'';\nconst supabase = createClient(process.env.VITE_SUPABASE_URL, process.env.VITE_SUPABASE_ANON_KEY);\n\nasync function checkDataSources() {\n  console.log(''🔍 Checking data sources for weekly leaderboard...\\n'');\n\n  try {\n    // Check 1: Do we have picks data for 2024?\n    console.log(''1️⃣ Checking picks table...'');\n    const { data: picksData, error: picksError } = await supabase\n      .from(''picks'')\n      .select(''user_id, week, season, result, points_earned'')\n      .eq(''season'', 2024)\n      .limit(10);\n      \n    if (picksError) {\n      console.log(''❌ Picks error:'', picksError.message);\n    } else {\n      console.log(''✅ Picks data:'', picksData?.length || 0, ''entries found'');\n      if (picksData && picksData.length > 0) {\n        const weeks = [...new Set(picksData.map(p => p.week))].sort();\n        console.log(''- Weeks with picks:'', weeks.join('', ''));\n        console.log(''- Sample pick:'', JSON.stringify(picksData[0], null, 2));\n      }\n    }\n    \n    // Check 2: Do we have users data?\n    console.log(''\\n2️⃣ Checking users table...'');\n    const { data: usersData, error: usersError } = await supabase\n      .from(''users'')\n      .select(''id, display_name'')\n      .limit(5);\n      \n    if (usersError) {\n      console.log(''❌ Users error:'', usersError.message);\n    } else {\n      console.log(''✅ Users data:'', usersData?.length || 0, ''entries found'');\n    }\n    \n    // Check 3: Do we have week_settings data?\n    console.log(''\\n3️⃣ Checking week_settings table...'');\n    const { data: weekSettings, error: weekError } = await supabase\n      .from(''week_settings'')\n      .select(''week, season'')\n      .eq(''season'', 2024)\n      .limit(5);\n      \n    if (weekError) {\n      console.log(''❌ Week settings error:'', weekError.message);\n    } else {\n      console.log(''✅ Week settings data:'', weekSettings?.length || 0, ''entries found'');\n      if (weekSettings && weekSettings.length > 0) {\n        const weeks = weekSettings.map(w => w.week).sort();\n        console.log(''- Configured weeks:'', weeks.join('', ''));\n      }\n    }\n    \n    // Check 4: Compare with season_leaderboard (which we know works)\n    console.log(''\\n4️⃣ Checking season_leaderboard for comparison...'');\n    const { data: seasonData, error: seasonError } = await supabase\n      .from(''season_leaderboard'')\n      .select(''user_id, display_name, total_points, season, is_verified, payment_status'')\n      .eq(''season'', 2024)\n      .limit(5);\n      \n    if (seasonError) {\n      console.log(''❌ Season leaderboard error:'', seasonError.message);\n    } else {\n      console.log(''✅ Season leaderboard data:'', seasonData?.length || 0, ''entries found'');\n      if (seasonData && seasonData.length > 0) {\n        console.log(''- Sample entry:'', {\n          name: seasonData[0].display_name,\n          points: seasonData[0].total_points,\n          verified: seasonData[0].is_verified,\n          payment_status: seasonData[0].payment_status\n        });\n      }\n    }\n    \n    console.log(''\\n📋 Summary:'');\n    console.log(''- Season leaderboard: Working ✅'');\n    console.log(''- Weekly leaderboard: Empty ❌''); \n    console.log(''- Root cause: Weekly leaderboard table not populated'');\n    console.log(''- Solution needed: Populate weekly_leaderboard table from picks data'');\n    \n  } catch (error) {\n    console.error(''❌ Check failed:'', error.message);\n  }\n}\n\ncheckDataSources().catch(console.error);\n\")",
      "Bash(VITE_SUPABASE_URL=\"https://zgdaqbnpgrabbnljmiqy.supabase.co\" VITE_SUPABASE_ANON_KEY=\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InpnZGFxYm5wZ3JhYmJubGptaXF5Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTM4NDU2MjgsImV4cCI6MjA2OTQyMTYyOH0.DCpIOdBbzQ0pPyk5WpfrKrcRxi49oyMccHCzP-T14w8\" node populate_weekly_leaderboard.js)",
      "Bash(VITE_SUPABASE_URL=\"https://zgdaqbnpgrabbnljmiqy.supabase.co\" VITE_SUPABASE_ANON_KEY=\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InpnZGFxYm5wZ3JhYmJubGptaXF5Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTM4NDU2MjgsImV4cCI6MjA2OTQyMTYyOH0.DCpIOdBbzQ0pPyk5WpfrKrcRxi49oyMccHCzP-T14w8\" node test_weekly_fix.js)",
      "Bash(VITE_SUPABASE_URL=\"https://zgdaqbnpgrabbnljmiqy.supabase.co\" VITE_SUPABASE_ANON_KEY=\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InpnZGFxYm5wZ3JhYmJubGptaXF5Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTM4NDU2MjgsImV4cCI6MjA2OTQyMTYyOH0.DCpIOdBbzQ0pPyk5WpfrKrcRxi49oyMccHCzP-T14w8\" node -e \"\nimport { createClient } from ''@supabase/supabase-js'';\nconst supabase = createClient(process.env.VITE_SUPABASE_URL, process.env.VITE_SUPABASE_ANON_KEY);\n\nasync function testPicksQuery() {\n  console.log(''🔍 Testing picks query directly...'');\n  \n  try {\n    // Test basic picks query first\n    console.log(''1. Basic picks query...'');\n    const { data: basicPicks, error: basicError } = await supabase\n      .from(''picks'')\n      .select(''user_id, week, season'')\n      .eq(''season'', 2024)\n      .eq(''week'', 1)\n      .limit(5);\n      \n    if (basicError) {\n      console.log(''❌ Basic picks error:'', basicError.message);\n      return;\n    }\n    \n    console.log(''✅ Basic picks success:'', basicPicks?.length || 0, ''entries'');\n    \n    if (basicPicks && basicPicks.length > 0) {\n      // Test the specific query that failed\n      console.log(''2. Testing specific user IDs query...'');\n      const userIds = basicPicks.map(p => p.user_id);\n      \n      const { data: specificPicks, error: specificError } = await supabase\n        .from(''picks'')\n        .select(''user_id, result, points_earned, is_lock'')\n        .eq(''season'', 2024)\n        .eq(''week'', 1)\n        .in(''user_id'', userIds)\n        .limit(5);\n        \n      if (specificError) {\n        console.log(''❌ Specific picks error:'', specificError.message);\n      } else {\n        console.log(''✅ Specific picks success:'', specificPicks?.length || 0, ''entries'');\n        if (specificPicks && specificPicks.length > 0) {\n          console.log(''Sample pick:'', JSON.stringify(specificPicks[0], null, 2));\n        }\n      }\n    }\n    \n  } catch (error) {\n    console.error(''❌ Test failed:'', error.message);\n  }\n}\n\ntestPicksQuery().catch(console.error);\n\")",
      "Bash(VITE_SUPABASE_URL=\"https://zgdaqbnpgrabbnljmiqy.supabase.co\" VITE_SUPABASE_ANON_KEY=\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InpnZGFxYm5wZ3JhYmJubGptaXF5Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTM4NDU2MjgsImV4cCI6MjA2OTQyMTYyOH0.DCpIOdBbzQ0pPyk5WpfrKrcRxi49oyMccHCzP-T14w8\" node -e \"\nconst { createClient } = require(''@supabase/supabase-js'');\nconst supabase = createClient(process.env.VITE_SUPABASE_URL, process.env.VITE_SUPABASE_ANON_KEY);\n\nasync function testEmergencyQueries() {\n  console.log(''🚨 Testing emergency service queries...'');\n  \n  // Test 1: Emergency season query (simplified)\n  try {\n    console.log(''Testing emergency season query...'');\n    const { data: seasonData, error } = await supabase\n      .from(''season_leaderboard'')\n      .select(''user_id, display_name, total_points, season_rank, total_wins, total_losses, total_pushes, lock_wins, lock_losses, total_picks, is_verified'')\n      .eq(''season'', 2024)\n      .eq(''is_verified'', true)\n      .order(''season_rank'', { ascending: true })\n      .limit(20);\n      \n    if (error) {\n      console.log(''❌ Season query error:'', error.message);\n    } else {\n      console.log(''✅ Season query success:'', seasonData?.length || 0, ''entries'');\n    }\n  } catch (error) {\n    console.log(''❌ Season query exception:'', error.message);\n  }\n  \n  // Test 2: Emergency weekly query (simplified)\n  try {\n    console.log(''Testing emergency weekly query...'');\n    const { data: weeklyData, error } = await supabase\n      .from(''weekly_leaderboard'')\n      .select(''user_id, display_name, total_points, weekly_rank, wins, losses, pushes, lock_wins, lock_losses, picks_made, is_verified'')\n      .eq(''season'', 2024)\n      .eq(''week'', 1)\n      .eq(''is_verified'', true)\n      .order(''weekly_rank'', { ascending: true })\n      .limit(20);\n      \n    if (error) {\n      console.log(''❌ Weekly query error:'', error.message);\n    } else {\n      console.log(''✅ Weekly query success:'', weeklyData?.length || 0, ''entries'');\n      console.log(''Note: Empty result expected since weekly table is not populated'');\n    }\n  } catch (error) {\n    console.log(''❌ Weekly query exception:'', error.message);\n  }\n  \n  console.log(''🚨 Emergency queries test complete'');\n}\n\ntestEmergencyQueries().catch(console.error);\n\")",
      "Bash(VITE_SUPABASE_URL=\"https://zgdaqbnpgrabbnljmiqy.supabase.co\" VITE_SUPABASE_ANON_KEY=\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InpnZGFxYm5wZ3JhYmJubGptaXF5Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTM4NDU2MjgsImV4cCI6MjA2OTQyMTYyOH0.DCpIOdBbzQ0pPyk5WpfrKrcRxi49oyMccHCzP-T14w8\" node -e \"\nconst { createClient } = require(''@supabase/supabase-js'');\nconst supabase = createClient(process.env.VITE_SUPABASE_URL, process.env.VITE_SUPABASE_ANON_KEY);\n\nasync function testExactQuery() {\n  console.log(''🔍 Testing exact production query...'');\n  \n  try {\n    console.time(''QueryDuration'');\n    \n    const { data: seasonData, error } = await supabase\n      .from(''season_leaderboard'')\n      .select(''user_id, display_name, total_points, season_rank, total_wins, total_losses, total_pushes, lock_wins, lock_losses, total_picks, is_verified'')\n      .eq(''season'', 2024)\n      .eq(''is_verified'', true)\n      .order(''season_rank'', { ascending: true })\n      .limit(20);\n      \n    console.timeEnd(''QueryDuration'');\n    \n    if (error) {\n      console.log(''❌ Query error:'', error.message);\n      console.log(''Error details:'', JSON.stringify(error, null, 2));\n    } else {\n      console.log(''✅ Query success:'', seasonData?.length || 0, ''entries'');\n      if (seasonData && seasonData.length > 0) {\n        console.log(''Sample entry:'', JSON.stringify(seasonData[0], null, 2));\n      }\n    }\n  } catch (error) {\n    console.log(''❌ Query exception:'', error.message);\n  }\n}\n\ntestExactQuery().catch(console.error);\n\")",
      "Bash(VITE_SUPABASE_URL=\"https://zgdaqbnpgrabbnljmiqy.supabase.co\" VITE_SUPABASE_ANON_KEY=\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InpnZGFxYm5wZ3JhYmJubGptaXF5Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTM4NDU2MjgsImV4cCI6MjA2OTQyMTYyOH0.DCpIOdBbzQ0pPyk5WpfrKrcRxi49oyMccHCzP-T14w8\" node -e \"\nconst { createClient } = require(''@supabase/supabase-js'');\nconst supabase = createClient(process.env.VITE_SUPABASE_URL, process.env.VITE_SUPABASE_ANON_KEY);\n\nasync function testSimplifiedQuery() {\n  console.log(''🔍 Testing simplified query WITHOUT is_verified filter...'');\n  \n  try {\n    console.time(''SimpleQuery'');\n    \n    const { data: seasonData, error } = await supabase\n      .from(''season_leaderboard'')\n      .select(''user_id, display_name, total_points, season_rank'')\n      .eq(''season'', 2024)\n      .order(''season_rank'', { ascending: true })\n      .limit(20);\n      \n    console.timeEnd(''SimpleQuery'');\n    \n    if (error) {\n      console.log(''❌ Simple query error:'', error.message);\n    } else {\n      console.log(''✅ Simple query success:'', seasonData?.length || 0, ''entries'');\n    }\n  } catch (error) {\n    console.log(''❌ Simple query exception:'', error.message);\n  }\n  \n  console.log(''\\n🔍 Testing even more basic query...'');\n  \n  try {\n    console.time(''BasicQuery'');\n    \n    const { data: basicData, error: basicError } = await supabase\n      .from(''season_leaderboard'')\n      .select(''user_id, display_name'')\n      .limit(5);\n      \n    console.timeEnd(''BasicQuery'');\n    \n    if (basicError) {\n      console.log(''❌ Basic query error:'', basicError.message);\n    } else {\n      console.log(''✅ Basic query success:'', basicData?.length || 0, ''entries'');\n    }\n  } catch (error) {\n    console.log(''❌ Basic query exception:'', error.message);\n  }\n}\n\ntestSimplifiedQuery().catch(console.error);\n\")",
      "Bash(VITE_SUPABASE_URL=\"https://zgdaqbnpgrabbnljmiqy.supabase.co\" VITE_SUPABASE_ANON_KEY=\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InpnZGFxYm5wZ3JhYmJubGptaXF5Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTM4NDU2MjgsImV4cCI6MjA2OTQyMTYyOH0.DCpIOdBbzQ0pPyk5WpfrKrcRxi49oyMccHCzP-T14w8\" node -e \"\nimport { createClient } from ''@supabase/supabase-js'';\nconst supabase = createClient(process.env.VITE_SUPABASE_URL, process.env.VITE_SUPABASE_ANON_KEY);\n\nasync function testMultipleQueries() {\n  console.log(''🧪 Testing multiple query scenarios...'');\n  \n  // Test 1: Basic query (fastest)\n  console.log(''\\n1️⃣ Testing basic season query...'');\n  const start1 = Date.now();\n  const { data: basic, error: basicError } = await supabase\n    .from(''season_leaderboard'')\n    .select(''user_id, display_name, season_rank, total_points'')\n    .eq(''season'', 2024)\n    .order(''season_rank'', { ascending: true })\n    .limit(10);\n  const duration1 = Date.now() - start1;\n  console.log(''Duration:'', duration1, ''ms'');\n  console.log(''Results:'', basic?.length || 0, ''entries'');\n  \n  // Test 2: With is_verified filter (uses our new index)\n  console.log(''\\n2️⃣ Testing with is_verified filter...'');\n  const start2 = Date.now();\n  const { data: verified, error: verifiedError } = await supabase\n    .from(''season_leaderboard'')\n    .select(''user_id, display_name, season_rank, total_points'')\n    .eq(''season'', 2024)\n    .eq(''is_verified'', true)\n    .order(''season_rank'', { ascending: true })\n    .limit(10);\n  const duration2 = Date.now() - start2;\n  console.log(''Duration:'', duration2, ''ms'');\n  console.log(''Results:'', verified?.length || 0, ''entries'');\n  \n  // Test 3: Full query (what emergency service runs)\n  console.log(''\\n3️⃣ Testing full emergency service query...'');\n  const start3 = Date.now();\n  const { data: full, error: fullError } = await supabase\n    .from(''season_leaderboard'')\n    .select(''user_id, display_name, season_rank, total_points, total_wins, total_losses, total_pushes, lock_wins, lock_losses'')\n    .eq(''season'', 2024)\n    .order(''season_rank'', { ascending: true })\n    .limit(50);\n  const duration3 = Date.now() - start3;\n  console.log(''Duration:'', duration3, ''ms'');\n  console.log(''Results:'', full?.length || 0, ''entries'');\n  \n  // Performance summary\n  console.log(''\\n📈 PERFORMANCE SUMMARY:'');\n  console.log(''Basic query:'', duration1, ''ms'');\n  console.log(''Verified filter query:'', duration2, ''ms''); \n  console.log(''Full query:'', duration3, ''ms'');\n  \n  const allUnder500 = duration1 < 500 && duration2 < 500 && duration3 < 500;\n  const allUnder1000 = duration1 < 1000 && duration2 < 1000 && duration3 < 1000;\n  \n  if (allUnder500) {\n    console.log(''🎯 EXCELLENT: All queries under 500ms - ready for production!'');\n  } else if (allUnder1000) {\n    console.log(''✅ GOOD: All queries under 1 second - major improvement achieved'');\n  } else {\n    console.log(''⚠️  Some queries still slow - may need additional optimization'');\n  }\n}\n\ntestMultipleQueries().catch(console.error);\n\")"
    ],
    "deny": []
  }
}